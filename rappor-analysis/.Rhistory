lines(first.half(rich1), type="o")
lines(first.half(rich2), type="o")
lines(first.half(rich3), type="o")
lines(first.half(rich4), type="o")
lines(first.half(rich5), type="o")
legend(3.5, 40, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
poor1 = c(4.35,   3.66,   0.00,   1.89,   1.41,   0.50,   0.00,   0.00,   1.06,   1.43)
poor2 = c(17.31,   2.91,   0.00,   0.90,   1.26,   0.00,   1.29,   0.13,   1.22,   1.51)
poor3 = c(13.24,   0.90,   0.77,   0.00,   0.16,   0.00,   0.00,   1.60,   1.67,   1.66)
poor4 = c(9.94,   3.08,   1.62,   0.44,   0.00,   0.00,   0.00,   1.43,   0.83,   2.33)
poor5 = c(16.67,   0.91,   0.00,   0.94,   1.02,   1.43,   0.73,   0.65,   0.00,   0.37)
rich1 = c(13.59,   2.38,   0.03,   1.63,   0.00,   2.73,   0.78,   0.00,   0.07,   0.00)
rich2 = c(2.10,   3.65,   0.48,   0.58,   0.54,   0.00,   0.00,   3.45,   0.00,   3.82)
rich3 = c(11.68,   0.00,   0.00,   0.00,   1.77,   2.93,   2.85,   3.81,   0.00,   0.00)
rich4 = c(11.77,   1.63,   0.00,   0.00,   1.09,   3.09,   0.00,   3.47,   0.00,   0.00)
rich5 = c(7.26,   0.68,   0.00,   3.37,   0.00,   3.45,   2.81,   0.00,   0.00,   4.35)
plot(first.half(poor1), type="o", lty=5, ylim=c(0, 50), xlim=c(1, 5), xlab="Round", ylab="Average contribution", main="My Model Simulation (minAbsolute)")
abline(h=(seq(0,50,10)), col="lightgray", lty="solid")
lines(first.half(poor2), type="o", lty=2)
lines(first.half(poor3), type="o", lty=2)
lines(first.half(poor4), type="o", lty=2)
lines(first.half(poor5), type="o", lty=2)
lines(first.half(rich1), type="o")
lines(first.half(rich2), type="o")
lines(first.half(rich3), type="o")
lines(first.half(rich4), type="o")
lines(first.half(rich5), type="o")
legend(4, 20, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
poor1 = c(12.01,  12.23,  20.26,  19.03,  33.39,  38.02,  49.97,  53.72,  71.25,  86.75)
poor2 = c(14.53,  10.69,  17.37,  24.45,  30.03,  31.84,  51.31,  66.45,  74.21,  91.71)
poor3 = c(13.00,  11.19,  19.17,  21.55,  33.59,  35.85,  42.33,  67.02,  69.62,  89.40)
poor4 = c(13.71,  12.61,  15.77,  24.84,  27.98,  38.69,  46.15,  63.06,  70.63,  80.50)
poor5 = c(10.32,  12.64,  17.22,  25.84,  29.96,  31.73,  53.70,  61.61,  70.94,  94.30)
rich1 = c(2.20,  31.16,  21.83,  27.44,  31.47,  41.77,  45.15,  69.10,  73.96,  87.82)
rich2 = c(8.95,  24.74,  24.92,  25.43,  32.58,  36.74,  49.19,  64.77,  80.83,  84.30)
rich3 = c(10.05,  24.65,  21.65,  29.29,  33.96,  40.32,  50.35,  52.80,  88.46,  77.10)
rich4 = c(22.26,  17.94,  23.28,  27.34,  27.01,  43.15,  49.15,  63.82,  65.38,  87.37)
rich5 = c(25.25,  15.42,  23.42,  26.00,  26.70,  43.63,  48.57,  53.45,  71.90,  88.62)
plot(first.half(poor1), type="o", lty=5, ylim=c(0, 50), xlim=c(1, 5), xlab="Round", ylab="Average contribution", main="My Model Simulation (Mean Proportion)")
abline(h=(seq(0,50,10)), col="lightgray", lty="solid")
lines(first.half(poor2), type="o", lty=2)
lines(first.half(poor3), type="o", lty=2)
lines(first.half(poor4), type="o", lty=2)
lines(first.half(poor5), type="o", lty=2)
lines(first.half(rich1), type="o")
lines(first.half(rich2), type="o")
lines(first.half(rich3), type="o")
lines(first.half(rich4), type="o")
lines(first.half(rich5), type="o")
legend(4, 20, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
legend(3.5, 15, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
plot(first.half(poor1), type="o", lty=5, ylim=c(0, 50), xlim=c(1, 5), xlab="Round", ylab="Average contribution", main="My Model Simulation (Mean Proportion)")
abline(h=(seq(0,50,10)), col="lightgray", lty="solid")
lines(first.half(poor2), type="o", lty=2)
lines(first.half(poor3), type="o", lty=2)
lines(first.half(poor4), type="o", lty=2)
lines(first.half(poor5), type="o", lty=2)
lines(first.half(rich1), type="o")
lines(first.half(rich2), type="o")
lines(first.half(rich3), type="o")
lines(first.half(rich4), type="o")
lines(first.half(rich5), type="o")
legend(3.5, 15, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
poor1 = c(19.87,   1.16,   1.68,   0.05,   1.47,   0.00,   1.49,   0.00,   0.00,   0.00)
poor2 = c(15.10,   1.39,   1.78,   1.29,   1.24,   0.00,   1.57,   0.00,   0.00,   0.00)
poor3 = c(16.83,   2.89,   0.00,   0.24,   0.14,   0.00,   0.00,   1.48,   0.00,   0.00)
poor4 = c(13.03,   3.56,   2.44,   0.00,   1.42,   0.00,   0.00,   0.00,   0.00,   0.00)
poor5 = c(10.43,   1.11,   3.53,   0.57,   0.00,   0.00,   0.33,   2.19,   0.00,   2.18)
rich1 = c(8.21,   3.41,   2.05,   3.17,   0.00,   1.80,   3.35,   2.52,   3.98,   2.74)
rich2 = c(7.74,   3.17,   0.71,   0.63,   2.70,   2.89,   2.00,   2.75,   3.68,   2.06)
rich3 = c(16.44,   4.50,   1.98,   0.00,   1.64,   0.00,   1.35,   0.00,   0.04,   0.00)
rich4 = c(3.80,   4.02,   0.87,   3.34,   0.00,   3.19,   0.00,   2.04,   1.16,   0.00)
rich5 = c(3.70,   4.93,   1.03,   0.84,   1.88,   0.00,   2.94,   1.91,   0.66,   0.00)
plot(first.half(poor1), type="o", lty=5, ylim=c(0, 50), xlim=c(1, 5), xlab="Round", ylab="Average contribution", main="My Model Simulation (minProportion)")
abline(h=(seq(0,50,10)), col="lightgray", lty="solid")
lines(first.half(poor2), type="o", lty=2)
lines(first.half(poor3), type="o", lty=2)
lines(first.half(poor4), type="o", lty=2)
lines(first.half(poor5), type="o", lty=2)
lines(first.half(rich1), type="o")
lines(first.half(rich2), type="o")
lines(first.half(rich3), type="o")
lines(first.half(rich4), type="o")
lines(first.half(rich5), type="o")
legend(4, 20, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
legend(3.5, 25, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
plot(first.half(poor1), type="o", lty=5, ylim=c(0, 50), xlim=c(1, 5), xlab="Round", ylab="Average contribution", main="My Model Simulation (minProportion)")
abline(h=(seq(0,50,10)), col="lightgray", lty="solid")
lines(first.half(poor2), type="o", lty=2)
lines(first.half(poor3), type="o", lty=2)
lines(first.half(poor4), type="o", lty=2)
lines(first.half(poor5), type="o", lty=2)
lines(first.half(rich1), type="o")
lines(first.half(rich2), type="o")
lines(first.half(rich3), type="o")
lines(first.half(rich4), type="o")
lines(first.half(rich5), type="o")
legend(3.5, 25, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
plot(first.half(poor1), type="o", lty=5, ylim=c(0, 50), xlim=c(1, 5), xlab="Round", ylab="Average contribution", main="My Model Simulation (meanProportion)")
abline(h=(seq(0,50,10)), col="lightgray", lty="solid")
lines(first.half(poor2), type="o", lty=2)
lines(first.half(poor3), type="o", lty=2)
lines(first.half(poor4), type="o", lty=2)
lines(first.half(poor5), type="o", lty=2)
lines(first.half(rich1), type="o")
lines(first.half(rich2), type="o")
lines(first.half(rich3), type="o")
lines(first.half(rich4), type="o")
lines(first.half(rich5), type="o")
legend(3.5, 15, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
plot(first.half(poor1), type="o", lty=5, ylim=c(0, 50), xlim=c(1, 5), xlab="Round", ylab="Average contribution", main="My Model Simulation (meanAbsolute)")
abline(h=(seq(0,50,10)), col="lightgray", lty="solid")
lines(first.half(poor2), type="o", lty=2)
lines(first.half(poor3), type="o", lty=2)
lines(first.half(poor4), type="o", lty=2)
lines(first.half(poor5), type="o", lty=2)
lines(first.half(rich1), type="o")
lines(first.half(rich2), type="o")
lines(first.half(rich3), type="o")
lines(first.half(rich4), type="o")
lines(first.half(rich5), type="o")
legend(3.5, 40, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
poor1 = c(4.35,   3.66,   0.00,   1.89,   1.41,   0.50,   0.00,   0.00,   1.06,   1.43)
poor2 = c(17.31,   2.91,   0.00,   0.90,   1.26,   0.00,   1.29,   0.13,   1.22,   1.51)
poor3 = c(13.24,   0.90,   0.77,   0.00,   0.16,   0.00,   0.00,   1.60,   1.67,   1.66)
poor4 = c(9.94,   3.08,   1.62,   0.44,   0.00,   0.00,   0.00,   1.43,   0.83,   2.33)
poor5 = c(16.67,   0.91,   0.00,   0.94,   1.02,   1.43,   0.73,   0.65,   0.00,   0.37)
rich1 = c(13.59,   2.38,   0.03,   1.63,   0.00,   2.73,   0.78,   0.00,   0.07,   0.00)
rich2 = c(2.10,   3.65,   0.48,   0.58,   0.54,   0.00,   0.00,   3.45,   0.00,   3.82)
rich3 = c(11.68,   0.00,   0.00,   0.00,   1.77,   2.93,   2.85,   3.81,   0.00,   0.00)
rich4 = c(11.77,   1.63,   0.00,   0.00,   1.09,   3.09,   0.00,   3.47,   0.00,   0.00)
rich5 = c(7.26,   0.68,   0.00,   3.37,   0.00,   3.45,   2.81,   0.00,   0.00,   4.35)
plot(first.half(poor1), type="o", lty=5, ylim=c(0, 50), xlim=c(1, 5), xlab="Round", ylab="Average contribution", main="My Model Simulation (minAbsolute)")
abline(h=(seq(0,50,10)), col="lightgray", lty="solid")
lines(first.half(poor2), type="o", lty=2)
lines(first.half(poor3), type="o", lty=2)
lines(first.half(poor4), type="o", lty=2)
lines(first.half(poor5), type="o", lty=2)
lines(first.half(rich1), type="o")
lines(first.half(rich2), type="o")
lines(first.half(rich3), type="o")
lines(first.half(rich4), type="o")
lines(first.half(rich5), type="o")
legend(4, 20, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
source('~/Dropbox/Princeton/EEB 325/Final Project/src/Graphs.R', echo=TRUE)
legend(3.5, 25, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
poor1 = c(4.35,   3.66,   0.00,   1.89,   1.41,   0.50,   0.00,   0.00,   1.06,   1.43)
poor2 = c(17.31,   2.91,   0.00,   0.90,   1.26,   0.00,   1.29,   0.13,   1.22,   1.51)
poor3 = c(13.24,   0.90,   0.77,   0.00,   0.16,   0.00,   0.00,   1.60,   1.67,   1.66)
poor4 = c(9.94,   3.08,   1.62,   0.44,   0.00,   0.00,   0.00,   1.43,   0.83,   2.33)
poor5 = c(16.67,   0.91,   0.00,   0.94,   1.02,   1.43,   0.73,   0.65,   0.00,   0.37)
rich1 = c(13.59,   2.38,   0.03,   1.63,   0.00,   2.73,   0.78,   0.00,   0.07,   0.00)
rich2 = c(2.10,   3.65,   0.48,   0.58,   0.54,   0.00,   0.00,   3.45,   0.00,   3.82)
rich3 = c(11.68,   0.00,   0.00,   0.00,   1.77,   2.93,   2.85,   3.81,   0.00,   0.00)
rich4 = c(11.77,   1.63,   0.00,   0.00,   1.09,   3.09,   0.00,   3.47,   0.00,   0.00)
rich5 = c(7.26,   0.68,   0.00,   3.37,   0.00,   3.45,   2.81,   0.00,   0.00,   4.35)
plot(first.half(poor1), type="o", lty=5, ylim=c(0, 50), xlim=c(1, 5), xlab="Round", ylab="Average contribution", main="My Model Simulation (minAbsolute)")
abline(h=(seq(0,50,10)), col="lightgray", lty="solid")
lines(first.half(poor2), type="o", lty=2)
lines(first.half(poor3), type="o", lty=2)
lines(first.half(poor4), type="o", lty=2)
lines(first.half(poor5), type="o", lty=2)
lines(first.half(rich1), type="o")
lines(first.half(rich2), type="o")
lines(first.half(rich3), type="o")
lines(first.half(rich4), type="o")
lines(first.half(rich5), type="o")
legend(3.5, 25, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
finalWealth = c(meanProportionalPoorLast, meanProportionalRichLast, meanAbsolutePoorLast, meanAbsoluteRichLast, minProportionalPoorLast, minProportionalRichLast, minAbsolutePoorLast, minAbsoluteRichLast)
plot(seq(1:8), finalWealth, xaxt='n', ylim=c(0, 250), main="Inequality after 10 rounds of different strategies", ylab="Final Wealth", xlab="Strategy.wealth", type="h")
points(finalWealth)
axis(1, at=seq(1:8), labels=strategies, cex.axis=0.5)
abline(h=(seq(0,250,25)), col="lightgray", lty="solid")
finalWealth = c(meanProportionalPoorLast, meanProportionalRichLast, meanAbsolutePoorLast, meanAbsoluteRichLast, minProportionalPoorLast, minProportionalRichLast, minAbsolutePoorLast, minAbsoluteRichLast)
plot(seq(1:8), finalWealth, xaxt='n', ylim=c(0, 250), main="Inequality after 10 rounds of different strategies", ylab="Final Wealth", xlab="Strategy.wealth", type="h")
points(finalWealth)
axis(1, at=seq(1:8), labels=strategies, cex.axis=0.6)
abline(h=(seq(0,250,25)), col="lightgray", lty="solid")
finalWealth = c(meanProportionalPoorLast, meanProportionalRichLast, meanAbsolutePoorLast, meanAbsoluteRichLast, minProportionalPoorLast, minProportionalRichLast, minAbsolutePoorLast, minAbsoluteRichLast)
plot(seq(1:8), finalWealth, xaxt='n', ylim=c(0, 250), main="Inequality after 10 rounds of different strategies", ylab="Final Wealth", xlab="Strategy.wealth", type="h")
points(finalWealth)
axis(1, at=seq(1:8), labels=strategies, cex.axis=0.75)
abline(h=(seq(0,250,25)), col="lightgray", lty="solid")
finalWealth = c(meanProportionalPoorLast, meanProportionalRichLast, meanAbsolutePoorLast, meanAbsoluteRichLast, minProportionalPoorLast, minProportionalRichLast, minAbsolutePoorLast, minAbsoluteRichLast)
plot(seq(1:8), finalWealth, xaxt='n', ylim=c(0, 250), main="Inequality after 10 rounds of different strategies", ylab="Final Wealth", xlab="Strategy.wealth", type="h")
points(finalWealth)
axis(1, at=seq(1:8), labels=strategies, cex.axis=0.7)
abline(h=(seq(0,250,25)), col="lightgray", lty="solid")
finalWealth = c(meanProportionalPoorLast, meanProportionalRichLast, meanAbsolutePoorLast, meanAbsoluteRichLast, minProportionalPoorLast, minProportionalRichLast, minAbsolutePoorLast, minAbsoluteRichLast)
plot(seq(1:8), finalWealth, xaxt='n', ylim=c(0, 250), main="Inequality after 10 rounds of different strategies", ylab="Final Wealth", xlab="Strategy.wealth", type="h")
points(finalWealth)
axis(1, at=seq(1:8), labels=strategies, cex.axis=0.65)
abline(h=(seq(0,250,25)), col="lightgray", lty="solid")
finalWealth = c(meanProportionalPoorLast, meanProportionalRichLast, meanAbsolutePoorLast, meanAbsoluteRichLast, minProportionalPoorLast, minProportionalRichLast, minAbsolutePoorLast, minAbsoluteRichLast)
plot(seq(1:8), finalWealth, xaxt='n', ylim=c(0, 250), main="Inequality after 10 rounds of different strategies", ylab="Final Wealth", xlab="Strategy.wealth", type="h")
points(finalWealth)
axis(1, at=seq(1:8), labels=strategies, cex.axis=0.6)
abline(h=(seq(0,250,25)), col="lightgray", lty="solid")
finalWealth = c(meanProportionalPoorLast, meanProportionalRichLast, meanAbsolutePoorLast, meanAbsoluteRichLast, minProportionalPoorLast, minProportionalRichLast, minAbsolutePoorLast, minAbsoluteRichLast)
plot(seq(1:8), finalWealth, xaxt='n', ylim=c(0, 250), main="Inequality after 10 rounds of different strategies", ylab="Final Wealth", xlab="Strategy.wealth", type="h")
points(finalWealth)
axis(1, at=seq(1:8), labels=strategies, cex.axis=0.7)
abline(h=(seq(0,250,25)), col="lightgray", lty="solid")
finalWealth = c(meanProportionalPoorLast, meanProportionalRichLast, meanAbsolutePoorLast, meanAbsoluteRichLast, minProportionalPoorLast, minProportionalRichLast, minAbsolutePoorLast, minAbsoluteRichLast)
plot(seq(1:8), finalWealth, xaxt='n', ylim=c(0, 250), main="Inequality after 10 rounds of different strategies", ylab="Final Wealth", xlab="Strategy.wealth", type="h")
points(finalWealth)
axis(1, at=seq(1:8), labels=strategies, cex.axis=0.8)
abline(h=(seq(0,250,25)), col="lightgray", lty="solid")
finalWealth = c(meanProportionalPoorLast, meanProportionalRichLast, meanAbsolutePoorLast, meanAbsoluteRichLast, minProportionalPoorLast, minProportionalRichLast, minAbsolutePoorLast, minAbsoluteRichLast)
plot(seq(1:8), finalWealth, xaxt='n', ylim=c(0, 250), main="Inequality after 10 rounds of different strategies", ylab="Final Wealth", xlab="Strategy.wealth", type="h")
points(finalWealth)
axis(1, at=seq(1:8), labels=strategies, cex.axis=0.9)
abline(h=(seq(0,250,25)), col="lightgray", lty="solid")
finalWealth = c(meanProportionalPoorLast, meanProportionalRichLast, meanAbsolutePoorLast, meanAbsoluteRichLast, minProportionalPoorLast, minProportionalRichLast, minAbsolutePoorLast, minAbsoluteRichLast)
plot(seq(1:8), finalWealth, xaxt='n', ylim=c(0, 250), main="Inequality after 10 rounds of different strategies", ylab="Final Wealth", xlab="Strategy.wealth", type="h")
points(finalWealth)
axis(1, at=seq(1:8), labels=strategies, cex.axis=0.85)
abline(h=(seq(0,250,25)), col="lightgray", lty="solid")
finalWealth = c(meanProportionalPoorLast, meanProportionalRichLast, meanAbsolutePoorLast, meanAbsoluteRichLast, minProportionalPoorLast, minProportionalRichLast, minAbsolutePoorLast, minAbsoluteRichLast)
plot(seq(1:8), finalWealth, xaxt='n', ylim=c(0, 250), main="Inequality after 10 rounds of different strategies", ylab="Final Wealth", xlab="Strategy.wealth", type="h")
points(finalWealth)
axis(1, at=seq(1:8), labels=strategies, cex.axis=0.8)
abline(h=(seq(0,250,25)), col="lightgray", lty="solid")
poor1 = c(12.01,  12.23,  20.26,  19.03,  33.39,  38.02,  49.97,  53.72,  71.25,  86.75)
poor2 = c(14.53,  10.69,  17.37,  24.45,  30.03,  31.84,  51.31,  66.45,  74.21,  91.71)
poor3 = c(13.00,  11.19,  19.17,  21.55,  33.59,  35.85,  42.33,  67.02,  69.62,  89.40)
poor4 = c(13.71,  12.61,  15.77,  24.84,  27.98,  38.69,  46.15,  63.06,  70.63,  80.50)
poor5 = c(10.32,  12.64,  17.22,  25.84,  29.96,  31.73,  53.70,  61.61,  70.94,  94.30)
rich1 = c(2.20,  31.16,  21.83,  27.44,  31.47,  41.77,  45.15,  69.10,  73.96,  87.82)
rich2 = c(8.95,  24.74,  24.92,  25.43,  32.58,  36.74,  49.19,  64.77,  80.83,  84.30)
rich3 = c(10.05,  24.65,  21.65,  29.29,  33.96,  40.32,  50.35,  52.80,  88.46,  77.10)
rich4 = c(22.26,  17.94,  23.28,  27.34,  27.01,  43.15,  49.15,  63.82,  65.38,  87.37)
rich5 = c(25.25,  15.42,  23.42,  26.00,  26.70,  43.63,  48.57,  53.45,  71.90,  88.62)
plot(first.half(poor1), type="o", lty=5, ylim=c(0, 50), xlim=c(1, 5), xlab="Round", ylab="Average contribution", main="My Model Simulation (meanProportion)")
abline(h=(seq(0,50,10)), col="lightgray", lty="solid")
lines(first.half(poor2), type="o", lty=2)
lines(first.half(poor3), type="o", lty=2)
lines(first.half(poor4), type="o", lty=2)
lines(first.half(poor5), type="o", lty=2)
lines(first.half(rich1), type="o")
lines(first.half(rich2), type="o")
lines(first.half(rich3), type="o")
lines(first.half(rich4), type="o")
lines(first.half(rich5), type="o")
legend(3.5, 15, c("Higher wealth", "Lower wealth"), lty=c(1, 5))
info
s.data.frame(c(cor(output, fitted(regular)), cor(output, fitted(robust)), cor(output, fitted(mars)), cor(output, predict(pls)), cor(fitted_elastic, output)))
rownames(info) = c("Regular", "Robust", "MARS", "SPLS", "Elastic Net")
colnames(info) = c("R2 Values")
mses = c(mse(output, fitted(regular)), mse(output, fitted(robust)), mse(output, fitted(mars)), mse(output, predict(pls)), mse(output, fitted_elastic))
vec_nos = c(length(attributes(terms(regular))$term.labels), length(attributes(terms(robust))$term.labels), length(mars$selected.terms), length(pls$A), length(which(coefs[ ,1] != 0)))
info[["SSE"]] = mses
info[["No. Vars"]] = vec_nos
info
in.csv", header=F)
data = data[1:nrow(data), 1:ncol(data)]
attach(data)
data = read.csv("trueTrain.csv", header=F)
data = data[1:nrow(data), 1:ncol(data)]
attach(data)
data = read.csv("trueTrain.csv", header=F)
data = read.csv("trueTrain.csv", header=F)
cv)
require(tree)
require(MASS)
require(earth)
require(spls)
require(elasticnet)
require(ape)
require(randomForest)
data = read.csv("trueTrain.csv", header=F)
install.packages('Rserve')
install.packages('ggplot2')
install.packages('devtools')
install.packages('RCurl')
install.packages('RJSONIO')
￼DT.binary = DT.trips[,1,by=c("giver","receiver")]
list("hi", "bye")
strs = list("1", "2")
params = list(k=c(16), h=c(3), m=c(8), p=c(0.5), q=c(0.5), f=c(0.5))
params$k
CreateMap(strs, params)
CreateMap <- function(strs, params, generate_pos = TRUE, basic = FALSE) {
# Creates a list of 0/1 matrices corresponding to mapping between the strs and
# Bloom filters for each instance of the RAPPOR.
# Ex. for 3 strings, 2 instances, 1 hash function and Bloom filter of size 4,
# the result could look this:
# [[1]]
#   1 0 0 0
#   0 1 0 0
#   0 0 0 1
# [[2]]
#   0 1 0 0
#   0 0 0 1
#   0 0 1 0
#
# Args:
#    strs: a vector of strings
#    params: a list of parameters in the following format:
#         (k, h, m, p, q, f).
#    generate_pos: Tells whether to generate an object storing the
#        positions of the nonzeros in the matrix
#    basic: Tells whether to use basic RAPPOR (only works if h=1).
M <- length(strs)
map_by_cohort <- list()
k <- params$k
h <- params$h
m <- params$m
for (i in 1:m) {
if (basic && (h == 1) && (k == M)) {
ones <- 1:M
} else {
ones <- sample(1:k, M * h, replace = TRUE)
}
cols <- rep(1:M, each = h)
map_by_cohort[[i]] <- sparseMatrix(ones, cols, dims = c(k, M))
colnames(map_by_cohort[[i]]) <- strs
}
all_cohorts_map <- do.call("rBind", map_by_cohort)
if (generate_pos) {
map_pos <- t(apply(all_cohorts_map, 2, function(x) {
ind <- which(x == 1)
n <- length(ind)
if (n < h * m) {
ind <- c(ind, rep(NA, h * m - n))
}
ind
}))
} else {
map_pos <- NULL
}
list(map_by_cohort = map_by_cohort, all_cohorts_map = all_cohorts_map,
map_pos = map_pos)
}
CreateMap(strs, params)
install.packages(glmnet)
install.packages("glmnet")
install.packages("parallel")
CreateMap <- function(strs, params, generate_pos = TRUE, basic = FALSE) {
# Creates a list of 0/1 matrices corresponding to mapping between the strs and
# Bloom filters for each instance of the RAPPOR.
# Ex. for 3 strings, 2 instances, 1 hash function and Bloom filter of size 4,
# the result could look this:
# [[1]]
#   1 0 0 0
#   0 1 0 0
#   0 0 0 1
# [[2]]
#   0 1 0 0
#   0 0 0 1
#   0 0 1 0
#
# Args:
#    strs: a vector of strings
#    params: a list of parameters in the following format:
#         (k, h, m, p, q, f).
#    generate_pos: Tells whether to generate an object storing the
#        positions of the nonzeros in the matrix
#    basic: Tells whether to use basic RAPPOR (only works if h=1).
M <- length(strs)
map_by_cohort <- list()
k <- params$k
h <- params$h
m <- params$m
for (i in 1:m) {
if (basic && (h == 1) && (k == M)) {
ones <- 1:M
} else {
ones <- sample(1:k, M * h, replace = TRUE)
}
cols <- rep(1:M, each = h)
map_by_cohort[[i]] <- sparseMatrix(ones, cols, dims = c(k, M))
colnames(map_by_cohort[[i]]) <- strs
}
all_cohorts_map <- do.call("rBind", map_by_cohort)
if (generate_pos) {
map_pos <- t(apply(all_cohorts_map, 2, function(x) {
ind <- which(x == 1)
n <- length(ind)
if (n < h * m) {
ind <- c(ind, rep(NA, h * m - n))
}
ind
}))
} else {
map_pos <- NULL
}
list(map_by_cohort = map_by_cohort, all_cohorts_map = all_cohorts_map,
map_pos = map_pos)
}
CreateMap(strs, params)
library(glmnet)
CreateMap <- function(strs, params, generate_pos = TRUE, basic = FALSE) {
# Creates a list of 0/1 matrices corresponding to mapping between the strs and
# Bloom filters for each instance of the RAPPOR.
# Ex. for 3 strings, 2 instances, 1 hash function and Bloom filter of size 4,
# the result could look this:
# [[1]]
#   1 0 0 0
#   0 1 0 0
#   0 0 0 1
# [[2]]
#   0 1 0 0
#   0 0 0 1
#   0 0 1 0
#
# Args:
#    strs: a vector of strings
#    params: a list of parameters in the following format:
#         (k, h, m, p, q, f).
#    generate_pos: Tells whether to generate an object storing the
#        positions of the nonzeros in the matrix
#    basic: Tells whether to use basic RAPPOR (only works if h=1).
M <- length(strs)
map_by_cohort <- list()
k <- params$k
h <- params$h
m <- params$m
for (i in 1:m) {
if (basic && (h == 1) && (k == M)) {
ones <- 1:M
} else {
ones <- sample(1:k, M * h, replace = TRUE)
}
cols <- rep(1:M, each = h)
map_by_cohort[[i]] <- sparseMatrix(ones, cols, dims = c(k, M))
colnames(map_by_cohort[[i]]) <- strs
}
all_cohorts_map <- do.call("rBind", map_by_cohort)
if (generate_pos) {
map_pos <- t(apply(all_cohorts_map, 2, function(x) {
ind <- which(x == 1)
n <- length(ind)
if (n < h * m) {
ind <- c(ind, rep(NA, h * m - n))
}
ind
}))
} else {
map_pos <- NULL
}
list(map_by_cohort = map_by_cohort, all_cohorts_map = all_cohorts_map,
map_pos = map_pos)
}
CreateMap(strs, params)
params
??sample
1:k
1:params$k
??rep
CreateMap(strs, params)
CreateMap(strs, params)
strs
strs = list("x", "y")
CreateMap(strs, params)
??read.from.csv
??read.from.csv
?read.from.csv
??read.csv
?read.csv
#!/usr/bin/env Rscript
args = ["./outputs/cohorts.csv", "./outputs/counts.csv", "./outputs/params.csv"]
args = c("./outputs/cohorts.csv", "./outputs/counts.csv", "./outputs/params.csv")
params = as.data.frame(read.csv(args[3]))
args = c("outputs/cohorts.csv", "outputs/counts.csv", "outputs/params.csv")
params = as.data.frame(read.csv(args[3]))
pwd()
pwd
getwd()
Rscript --hel
Rscript --help
version
install.packages("limSolve")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='rappor-js',
token='8FD653700D15C8AC9E95011FC694A059',
secret='<SECRET>')
shiny::runApp('Dropbox/Princeton/Thesis/Testing/rappor/apps/rappor-analysis')
shiny::runApp('Dropbox/Princeton/Thesis/Testing/rappor/apps/rappor-analysis')
shiny::runApp('Dropbox/rappor-js/R/apps/rappor-analysis')
rsconnect::setAccountInfo(name='rappor-js',
token='8FD653700D15C8AC9E95011FC694A059',
secret='CB/ghcpDLFsPRhA5nO3sAEIB/Yy3tPTBcTr993y8')
runApp()
setwd("~/Dropbox/rappor-js/R/apps/rappor-analysis")
runApp()
shiny::runApp()
deployApp()
library(rsconnect)
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(rsconnect)
deployApp()
install.packages("abind")
install.packages("RUnit")
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
setwd("~/Dropbox/rappor-js/rappor-analysis")
library(rsconnect)
deployApp()
runApp()
shiny::runApp()
shiny::deployApp()
deployApp()

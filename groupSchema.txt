Universe = {"ant", "bat", "cat", "dog", "elephant", "fox", ..., "zebra"}

--

Client Report 1:
{
	params,
	cohort,
	{
		S_1 = md5("cat")
		PRR = noisy(S_1)
		IRR = noisy(PRR)
	},
	{
		S_2 = md5("dog")
		PRR = noisy(S_2)
		IRR = noisy(PRR)
	},
	{
		S_3 = md5("monkey")
		PRR = noisy(S_3)
		IRR = noisy(PRR)
	},
	{
		S_4 = md5("rat")
		PRR = noisy(S_4)
		IRR = noisy(PRR)
	},
	{
		S   = S_1 + S_2 + S_3 + S_4
		PRR = noisy(S)
		IRR = noisy(PRR)
	}
}

Client Report 2:
{
	params,
	cohort,
	{
		S_1 = md5("cat") [binary vector of length k]
		PRR = noisy(S_1)
		IRR = noisy(PRR)
	},
	{
		S_2 = md5("dog") [binary vector of length k]
		PRR = noisy(S_2)
		IRR = noisy(PRR)
	},
	{
		S_3 = md5("iguana") [binary vector of length k]
		PRR = noisy(S_3)
		IRR = noisy(PRR)
	},
	{
		S_4 = md5("reindeer") [binary vector of length k]
		PRR = noisy(S_4)
		IRR = noisy(PRR)
	},
	{
		S_5 = md5("snake") [binary vector of length k]
		PRR = noisy(S_5)
		IRR = noisy(PRR)
	},
	{
		S   = S_1 + S_2 + S_3 + S_4 + S_5 [int vector of length k]
		R   = scramble(S)
		t   = # of modifications to R
	}
}

scramble function for S: randomly add, ignore, or subtract 1 to each of the k ints (set paramater for "randomly")
                         report the # of times your added or subtracted 1 from each bit
                         (or
                         do same irr-prr process)

---------
// Decode
---------

Client Report 1:

For each of {IRR_1, IRR_2, ..., IRR_w}, find P(IRR_i | md5(animal)) for all animals

Map each IRR_i to v animals by picking the v most likely animal

Once we have w sets of v animals, create a superset of animals ranked by their probabilities. There should be at most w*v animals in this superset (toss out duplicates).

Generate permutations of sets of length w (start with most likely ones etc) to create candidates for S. There are at most (w*v choose w) possible permutations, since order does not matter.

See which of candidates fit the parameter described by t. It could be any number, from 0 upwards

---------
// Feedback
---------

- Can't add noise willy nilly - Laplacian distribution ensures differential privacy (height example, 6.0, 6.1)

- Idea is this:
	- Say we are reporting which websites people use
	- Users who use fb are much more likely to use instagram
	- Users who use fb and isntagram are much more likely to use twitter, etc
	- Want to capture this association
